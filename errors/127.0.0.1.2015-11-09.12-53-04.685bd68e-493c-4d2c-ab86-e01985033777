(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'datetime.date' object has no attribute 'represent'"
p3
sS'layer'
p4
S'/home/marcelotheodoro/web2py/applications/web2clinic/controllers/pacientes.py'
p5
sS'code'
p6
S"# -*- coding: utf-8 -*-\n\n\ndef buscar_paciente(id):\n    return db(db.pacientes.id == id).select().first()\n\n\ndef buscar_agendamento(id):\n    return db(db.agendamentos.id == id).select().first()\n\n\ndef buscar_consulta(id):\n    return db(db.consultas.id == id).select().first()\n\n\ndef buscar_consulta_paciente(id):\n    return db(db.consultas.id_paciente == id).select()\n\n\ndef buscar(base, id):\n    bases = ['paciente',\n            'agendamento',\n            'consulta',\n            'consulta_paciente']\n    if base not in bases:\n        raise HTTP(403)\n    try:\n        if base == 'paciente':\n            dados = buscar_paciente(id)\n        elif base == 'agendamento':\n            dados = buscar_agendamento(id)\n        elif base == 'consulta':\n            dados = buscar_consulta(id)\n        elif base == 'consulta_paciente':\n            dados = buscar_consulta_paciente(id)\n        else:\n            raise HTTP(404)\n\n        if not dados:\n            raise HTTP(404)\n    except ValueError:\n        raise HTTP(404)\n    return dados\n\n\ndef index():\n    pacientes = db(db.pacientes).select()\n    agendamentos = db(db.agendamentos).select()\n    consultas = db(db.consultas).select()\n    return locals()\n\n\ndef cadastrar():\n    form = SQLFORM(db.pacientes)\n    if form.process().accepted:\n        id = form.vars.id\n        redirect(URL(c='pacientes', f='paciente', args=id), client_side=True)\n    return locals()\n\n\ndef paciente():\n    id_paciente = request.args(0) or redirect(URL(c='pacientes',\n                                                    f='pacientes'),\n                                              client_side=True)\n    paciente = buscar('paciente', id_paciente)\n    paciente.nascimento.represent = lambda value, row: value.strftime('%d-%m-%Y')\n    return locals()\n\n\ndef editar_cadastro():\n    id_paciente = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='pacientes'),\n                                              client_side=True)\n    paciente = buscar('paciente', id_paciente)\n    db.pacientes.id.readable = False\n    form = SQLFORM(db.pacientes, paciente, upload=URL('download'))\n    if form.process().accepted:\n        redirect(URL(c='pacientes', f='paciente', args=id_paciente),\n                 client_side=True)\n    return locals()\n\n\ndef pacientes():\n    links = [lambda row: A(SPAN('Visualizar',\n                                _class='icon magnifier icon-zoom-in\\\n                                        glyphicon glyphicon-zoom-in'),\n                           _class='button btn btn-default',\n                           _href=URL(c='pacientes', f='paciente',\n                                     args=[row.id])),\n             lambda row: A(SPAN('Editar',\n                                _class='icon pen icon-pencil\\\n                                        glyphicon glyphicon-pencil'),\n                           _class='button btn btn-default',\n                           _href=URL(c='pacientes', f='editar_cadastro',\n                                     args=[row.id]))]\n    grid = SQLFORM.grid(db.pacientes,\n                        fields=[db.pacientes.nome, db.pacientes.nascimento,\n                                db.pacientes.sexo],\n                        csv=False, links=links, details=False, create=False,\n                        editable=False, deletable=True)\n    return locals()\n\n\ndef novo_agendamento():\n    links = [lambda row: A(SPAN('Agendar',\n                                _class='icon plus icon-plus\\\n                                        glyphicon glyphicon-plus'),\n                           _class='button btn btn-default',\n                           _href=URL(c='pacientes', f='agendar',\n                                     args=[row.id]))]\n    grid = SQLFORM.grid(db.pacientes,\n                        fields=[db.pacientes.nome, db.pacientes.cpf],\n                        links=links, csv=False, editable=False,\n                        deletable=False, details=False, create=False)\n    return locals()\n\n\ndef agendar():\n    id_paciente = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='novo_agendamento'),\n                                              client_side=True)\n    paciente = buscar('paciente', id_paciente)\n    form = SQLFORM(db.agendamentos)\n    form.vars.id_paciente = id_paciente\n    if form.process().accepted:\n        id = form.vars.id\n        redirect(URL(c='pacientes', f='agendamento', args=id),\n                 client_side=True)\n    return locals()\n\n\ndef editar_agendamento():\n    id_agendamento = request.args(0) or redirect(URL(c='pacientes',\n                                                     f='agendamentos'),\n                                                 client_side=True)\n    agendamento = buscar('agendamento', id_agendamento)\n    db.agendamentos.id.readable = False\n    form = SQLFORM(db.agendamentos, agendamento)\n    if form.process().accepted:\n        redirect(URL(c='pacientes', f='agendamento', args=id_agendamento),\n                 client_side=True)\n    return locals()\n\n\ndef agendamento():\n    id_agendamento = request.args(0) or redirect(URL(c='pacientes',\n                                                     f='agendamentos'),\n                                                 client_side=True)\n    agendamento = buscar('agendamento', id_agendamento)\n    id_paciente = agendamento.id_paciente\n    paciente = buscar('paciente', id_paciente)\n    form = SQLFORM.factory(Field('tipo_consulta',\n                                 requires=IS_IN_SET([i['label']\n                                                    for i in tipos_consultas])\n                                 ))\n    if form.process().accepted:\n        tipo_consulta = form.vars.tipo_consulta\n        tipo_consulta = [i['form'] for i in tipos_consultas\n                         if i['label'] == tipo_consulta][0]\n        redirect(URL(c='pacientes', f='consulta',\n                     args=[tipo_consulta, id_agendamento],\n                     vars=dict(agendamento=True)),\n                 client_side=True)\n    return locals()\n\n\ndef apagar_agendamento():\n    id_agendamento = request.args(0) or redirect(URL(c='pacientes',\n                                                     f='agendamentos'),\n                                                 client_side=True)\n    agendamento = buscar('agendamento', id_agendamento)\n    id_paciente = agendamento.id_paciente\n    paciente = buscar('paciente', id_paciente)\n    form = SQLFORM.factory()\n    if form.process().accepted:\n        db(db.agendamentos.id == id_agendamento).delete()\n        redirect(URL(c='pacientes', f='agendamentos'), client_side=True)\n    return locals()\n\n\ndef agendamentos():\n    agendamentos = db(db.agendamentos).select()\n    lista = []\n    for agendamento in agendamentos:\n        paciente = buscar('paciente', agendamento.id_paciente)\n        lista.append(dict({'dia': agendamento.dia,\n                           'hora_inicio': agendamento.hora_inicio,\n                           'hora_fim': agendamento.hora_fim,\n                           'id_paciente': paciente.id,\n                           'nome': paciente.nome,\n                           'id_agendamento': agendamento.id}))\n    lista = sorted(lista,\n                   key=lambda x: '{0} {1}'.format(x['dia'], x['hora_inicio']))\n    return dict(lista=lista)\n\n\ndef consulta():\n    tipo_consulta = request.args(0) or redirect(URL(c='pacientes',\n                                                    f='agendamentos'))\n    # TODO: gambiarra.start()\n    if request.vars['agendamento'] == 'True':\n        id_agendamento = request.args(1) or redirect(URL(c='pacientes',\n                                                         f='agendamentos'))\n        agendamento = buscar('agendamento', id_agendamento)\n        id_paciente = agendamento.id_paciente\n        paciente = buscar('paciente', id_paciente)\n    elif request.vars['agendamento'] == 'False':\n        id_paciente = request.args(1) or redirect(URL(c='pacientes',\n                                                      f='agendamentos'))\n        paciente = buscar('paciente', id_paciente)\n    else:\n        raise HTTP(404)\n    # TODO: gambiarra.stop()\n    try:\n        tipo_consulta = [i for i in tipos_consultas\n                         if i['form'] == tipo_consulta][0]\n    except IndexError:\n        raise HTTP(404)\n    form = SQLFORM(tipo_consulta['base'])\n    response.view = tipo_consulta['view_form']\n    form.vars.id_paciente = paciente.id\n    if form.process().accepted:\n        id_form = form.vars.id\n        id_insert = db.consultas.insert(id_paciente=paciente.id,\n                                        hora_fim=request.now,\n                                        tipo_consulta=tipo_consulta['form'],\n                                        id_form=id_form)\n        if not id_insert:\n            raise HTTP(500)\n        redirect(URL(c='pacientes', f='ver_consulta', args=id_insert),\n                 client_side=True)\n    return locals()\n\n\ndef consultas():\n    id_paciente = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='todas_consultas'))\n    paciente = buscar('paciente', id_paciente)\n    consultas = buscar('consulta_paciente', id_paciente)\n    return locals()\n\n\ndef nova_consulta():\n    links = [lambda row: A('Iniciar consulta', _class='button btn\\\n                                                       btn-default',\n                           _href=URL(c='pacientes', f='consultar',\n                                     args=[row.id]))]\n    grid = SQLFORM.grid(db.pacientes,\n                        fields=[db.pacientes.nome, db.pacientes.cpf],\n                        links=links, csv=False, editable=False,\n                        deletable=False, details=False, create=False)\n    return locals()\n\n\ndef consultar():\n    id_paciente = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='todas_consultas'))\n    paciente = buscar('paciente', id_paciente)\n    form = SQLFORM.factory(Field('tipo_consulta',\n                                 requires=IS_IN_SET([i['label'] for i in\n                                                    tipos_consultas])))\n    if form.process().accepted:\n        tipo_consulta = form.vars.tipo_consulta\n        tipo_consulta_form = [i['form'] for i in tipos_consultas\n                              if tipo_consulta == i['label']][0]\n        redirect(URL(c='pacientes', f='consulta',\n                 args=[tipo_consulta_form, id_paciente],\n                 vars=dict(agendamento=False)), client_side=True)\n    return locals()\n\n\ndef todas_consultas():\n    links = [lambda row: A('Ver consulta', _class='button btn btn-default',\n                           _href=URL(c='pacientes', f='ver_consulta',\n                                     args=[row.id]))]\n    form = SQLFORM.smartgrid(db.consultas, linked_tables=['id_paciente'],\n                             fields=[db.consultas.id_paciente,\n                                     db.consultas.tipo_consulta,\n                                     db.consultas.hora_fim],\n                             csv=False, editable=False, deletable=False,\n                             details=False, create=False, links=links)\n    return locals()\n\n\ndef ver_consulta():\n    id_consulta = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='todas_consultas'))\n    consulta = buscar('consulta', id_consulta)\n    consulta.tipo_consulta = [i['label'] for i in tipos_consultas\n                              if consulta.tipo_consulta == i['form']][0]\n    paciente = buscar('paciente', consulta.id_paciente)\n    return locals()\n\n\ndef prontuario_consulta():\n    id_consulta = request.args(0) or redirect(URL(c='pacientes',\n                                                  f='todas_consultas'))\n    consulta = buscar('consulta', id_consulta)\n    tipo_consulta = consulta.tipo_consulta\n    ficha = [i['base'] for i in tipos_consultas\n             if i['form'] == tipo_consulta][0]\n    formulario = db(ficha.id == consulta.id_form).select().first()\n    response.view = [i['view_prontuario'] for i in tipos_consultas\n                     if i['form'] == tipo_consulta][0]\n    return locals()\n\n\n@cache.action()\ndef download():\n    return response.download(request, db)\n\n\nresponse._vars=response._caller(paciente)\n"
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/marcelotheodoro/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/marcelotheodoro/web2py/applications/web2clinic/controllers/pacientes.py", line 313, in <module>\n  File "/home/marcelotheodoro/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/marcelotheodoro/web2py/applications/web2clinic/controllers/pacientes.py", line 66, in paciente\n    paciente.nascimento.represent = lambda value, row: value.strftime(\'%d-%m-%Y\')\nAttributeError: \'datetime.date\' object has no attribute \'represent\'\n'
p11
s.